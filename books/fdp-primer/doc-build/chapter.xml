<!-- Copyright (c) 1999 Neil Blakey-Milner, All rights reserved.

     Redistribution and use in source (SGML DocBook) and 'compiled' forms
     (SGML HTML, PDF, PostScript, RTF and so forth) with or without
     modification, are permitted provided that the following conditions
     are met:

      1.  Redistributions of source code (SGML DocBook) must retain the above
	 copyright notice, this list of conditions and the following
	 disclaimer as the first lines of this file unmodified.

      2.  Redistributions in compiled form (transformed to other DTDs,
	 converted to PDF, PostScript, RTF and other formats) must reproduce
	 the above copyright notice, this list of conditions and the
	 following disclaimer in the documentation and/or other materials
	 provided with the distribution.

     THIS DOCUMENTATION IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR
     IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
     OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
     DISCLAIMED.  IN NO EVENT SHALL NIK CLAYTON BE LIABLE FOR ANY DIRECT,
     INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
     (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
     HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
     STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
     ANY WAY OUT OF THE USE OF THIS DOCUMENTATION, EVEN IF ADVISED OF THE
     POSSIBILITY OF SUCH DAMAGE.

     The FreeBSD Documentation Project
     The FreeBSD Brazilian Portuguese Documentation Project
 
     $FreeBSD: trunk/docs/pt_BR.ISO8859-1/books/fdp-primer/doc-build/chapter.xml 165 2012-10-04 21:26:02Z ebrandi@fugspbr.org $

     Original revision: r38845

-->

<chapter id="doc-build">
  <title>O processo de construção da 
    documentação</title>

  <para>A principal finalidade desse capítulo é explicar 
    claramente <emphasis>como o processo de criação da 
    documentação é organizado</emphasis>, e 
    <emphasis>como fazer modificações a este 
    processo</emphasis>.</para>

  <para>Depois de finalizar a leitura deste capítulo 
    você deverá:</para>

  <itemizedlist>
    <listitem>
      <para>Saber o que você precisa para compilar a 
	documentação mantida pelo FDP, em 
	adição ao que foi mencionado no 
	<link linkend="tools">capítulo Ferramentas SGML</link>.
	</para>
    </listitem>

    <listitem>
      <para>Ser capaz de ler e entender as instruções do
	<application>make</application> que estão presentes 
	em cada documento <filename>Makefile</filename>, assim como 
	ter uma visão geral do 
	<filename>doc.project.mk</filename>.</para>
    </listitem>

    <listitem>
      <para>Ser capaz de customizar o processo de 
	compilação usando variáveis e alvos do 
	<application>make</application>.</para>
    </listitem>
  </itemizedlist>

  <sect1>
    <title>Ferramentas para construção da 
      documentação do FreeBSD</title>

    <para>Aqui estão suas ferramentas.  Use-as de todas as
      formas que puder.</para>

    <itemizedlist>
      <listitem>
	<para>A primeira ferramenta que você precisará 
	  é o <application>make</application>, mais 
	  especificamente o <application>Berkeley Make</application>.
	  </para>
      </listitem>

      <listitem>
	<para>A construção de pacotes no FreeBSD 
	  é executada pelo 
	  <application>pkg_create</application>.  Se você 
	  não está utilizando o FreeBSD, você 
	  terá que viver sem o uso de pacotes, ou então
	  terá que compilar o código fonte você 
	  mesmo.</para>
      </listitem>

      <listitem>
	<para>O <application>gzip</application> é 
	  necessário para criar versões compactadas do 
	  documento.  O compressor <application>bzip2</application> e
	  os arquivos <application>zip</application> também 
	  são suportados.  O <application>tar</application> 
	  é suportado, e a construção de
	  pacotes necessita dele.</para>
      </listitem>

      <listitem>
	<para>O <application>install</application> é o 
	  método padrão para instalar a 
	  documentação.  Entretanto, existem 
	  alternativas.</para>
      </listitem>
    </itemizedlist>

    <note>
      <para>É improvável que você tenha qualquer 
	problema em localizar esses dois últimos, eles estão 
	sendo mencionados apenas para que a listagem fique completa.
	</para>
    </note>
  </sect1>

  <sect1>
    <title>Entendendo <filename>Makefile</filename>s na árvore da 
      documentação</title>

    <para>Há três tipos principais de 
      <filename>Makefile</filename>s na árvore do projeto de 
      documentção do FreeBSD.</para>

    <itemizedlist>
      <listitem>
	<para>Os <link linkend="sub-make">
	<filename>Makefile</filename>s de subdiretório</link> 
	simplesmente passam comandos para os diretórios 
	abaixo dele.</para>
      </listitem>

      <listitem>
	<para>Os <link linkend="doc-make">
	  <filename>Makefile</filename>s de 
	  documentação</link> descrevem o(s) 
	  documento(s) que deve(m) ser produzido(s) a partir deste 
	  diretório.</para>
      </listitem>

      <listitem>
	<para>Os <link linkend="make-includes">
	  <application>Make</application> includes</link> são 
	  os responsáveis pela produção do 
	  documento, e geralmente possuem o nome no formato 
	  <filename>doc.<replaceable>xxx</replaceable>.mk</filename>.
	  </para>
      </listitem>
    </itemizedlist>

    <sect2 id="sub-make">
      <title><filename>Makefile</filename>s de Subdiretórios</title>

      <para>Estes <filename>Makefile</filename>s geralmente tem a 
	forma:</para>

      <programlisting>SUBDIR =articles
SUBDIR+=books

COMPAT_SYMLINK = en

DOC_PREFIX?= ${.CURDIR}/..
.include "${DOC_PREFIX}/share/mk/doc.project.mk"</programlisting>

      <para>Resumidamente, as primeiras quatro 
	linhas não vazias definem as variáveis do
	<application>make</application>, <makevar>SUBDIR</makevar>, 
	<makevar>COMPAT_SYMLINK</makevar>, e 
	<makevar>DOC_PREFIX</makevar>.</para>

      <para>A primeira declaração da variável  
	<makevar>SUBDIR</makevar>, tanto quanto a
	declaração da variável 
	<makevar>COMPAT_SYMLINK</makevar>, 
	mostra como atribuir um valor a uma variável,
	sobrescrevendo qualquer valor anterior que a mesma
	contenha.</para>

      <para>A segunda declaração da variável
	<makevar>SUBDIR</makevar> mostra como um valor é 
	adicionado ao valor atual de uma variável.  A 
	variável <makevar>SUBDIR</makevar> agora é
	composta por <literal>articles books</literal>.</para>

      <para>A declaração do
	<makevar>DOC_PREFIX</makevar> mostra como um valor é 
	atribuído para uma variável, mas somente se 
	ela ainda não estiver definida.  Isto é 
	útil se o <makevar>DOC_PREFIX</makevar> não 
	for onde este <filename>Makefile</filename> pensa que 
	é - o usuário pode cancelar e fornecer 
	o valor correto.</para>

      <para>Agora o que tudo isso significa?  O 
	<makevar>SUBDIR</makevar> lista quais subdiretórios 
	abaixo do atual devem ser incluídos no processo de 
	compilação durante a geração 
	do documento.</para>

      <para>O <makevar>COMPAT_SYMLINK</makevar> é 
	específico para compatibilizar os links 
	simbólicos que ligam os idiomas a sua 
	codificação oficial (por exemplo o 
	<filename>doc/en</filename> deve apontar para 
	<filename>en_US.ISO-8859-1</filename>).</para>

      <para>O <makevar>DOC_PREFIX</makevar> é o caminho para a 
	raíz da árvore do projeto de 
	documentação do FreeBSD.  O qual nem sempre 
	é facil de encontrar, e que também pode ser 
	facilmente sobrescrito, para permitir flexibilidade.  O
	<makevar>.CURDIR</makevar> é uma variável 
	interna do <application>make</application> que contém 
	o caminho para o diretório atual.</para>

      <para>A linha final inclui o arquivo principal do projeto de
	documentação do FreeBSD, o 
	<filename>doc.project.mk</filename>, ele é o 
	responsável por converter estas variáveis em 
	instruções de compilação para 
	uso do <application>make</application>.</para>

    </sect2>
    <sect2 id="doc-make">
      <title><filename>Makefile</filename>s de Documentação</title>

      <para>Estes <filename>Makefile</filename>s ajustam várias
	variáveis do <application>make</application> as quais
	descrevem como construir a documentação 
	contida em um determinado diretório.</para>

      <para>Aqui está um exemplo:</para>

      <programlisting>MAINTAINER=nik@FreeBSD.org

DOC?= book

FORMATS?= html-split html

INSTALL_COMPRESSED?= gz
INSTALL_ONLY_COMPRESSED?=

# SGML content
SRCS=  book.sgml

DOC_PREFIX?= ${.CURDIR}/../../..

.include "$(DOC_PREFIX)/share/mk/docproj.docbook.mk"</programlisting>

      <para>A variável <makevar>MAINTAINER</makevar> é 
	uma muito importante.  Esta variável fornece a 
	habilidade de reivindicar a propriedade sobre um documento no 
	projeto de documentação do FreeBSD, é 
	por meio dela que você recebe a responsabilidade de 
	mantê-lo.</para>

      <para><makevar>DOC</makevar> é o nome (sem a 
	extensão <filename>.sgml</filename>) do principal 
	documento criado por este diretório.  A variável
	<makevar>SRCS</makevar> lista todos os arquivos individuais 
	que compõem o documento.  Ela também deve 
	incluir os arquivos importantes, nos quais qualquer 
	mudança deve resultar em uma 
	reconstrução.</para>

      <para>O <makevar>FORMATS</makevar> indica os formatos 
	nos quais o documento deve ser gerado por padrão.
	O <makevar>INSTALL_COMPRESSED</makevar> contém a lista 
	padrão das técnicas de compressão que 
	devem ser usadas no documento depois que ele é gerado.
	A variável <makevar>INSTALL_ONLY_COMPRESS</makevar>, 
	nula por padrão, deve ser definida para um valor
	não nulo apenas se você desejar gerar 
	exclusivamente a versão compactada do documento.</para>

      <note>
	<para>Nós abordamos a atribuição das 
	  variáveis opcionais na <link 
	  linkend="sub-make">seção anterior</link>.
	  </para>
      </note>

      <para>Você também já deve estar
      	familiarizado com a atribuição da 
	variável <makevar>DOC_PREFIX</makevar> e com as
	instruções de include.</para>
    </sect2>
  </sect1>

  <sect1 id="make-includes">
    <title>Includes do <application>Make</application> do projeto de documentação 
      do FreeBSD</title>

    <para>Isto é melhor explicado pela inspeção 
      no código.  Aqui estão os arquivos include do 
      sistema:</para>

    <itemizedlist>
      <listitem>
	<para>O <filename>doc.project.mk</filename> é o 
	  principal arquivo include do projeto, que inclui todos os 
	  arquivos includes necessários.</para>
      </listitem>

      <listitem>
	<para>O <filename>doc.subdir.mk</filename> controla a
	  navegação na árvore de 
	  documentação durante 
	  o processo de construção e 
	  instalação.</para>
      </listitem>

      <listitem>
	<para>O <filename>doc.install.mk</filename> fornece as 
	  variáveis que afetam a propriedade e a 
	  instalação de documentos.</para>
      </listitem>

      <listitem>
	<para>O <filename>doc.docbook.mk</filename> é 
	  incluído se o <makevar>DOCFORMAT</makevar> 
	  for <literal>docbook</literal> e se a variável 
	  <makevar>DOC</makevar> estiver definida.</para>
      </listitem>
    </itemizedlist>

    <sect2>
      <title><filename>doc.project.mk</filename></title>

      <para>Por inspeção:</para>

      <programlisting>DOCFORMAT?=	docbook
MAINTAINER?=	doc@FreeBSD.org

PREFIX?=	/usr/local
PRI_LANG?=	en_US.ISO8859-1

.if defined(DOC)
.if ${DOCFORMAT} == "docbook"
.include "doc.docbook.mk"
.endif
.endif

.include "doc.subdir.mk"
.include "doc.install.mk"</programlisting>

      <sect3>

	<title>Variáveis</title>

	<para>As variáveis <makevar>DOCFORMAT</makevar> e 
	  <makevar>MAINTAINER</makevar> serão atribuídas
	  com valores padrão, se o valor das mesmas não 
	  tiver sido definido no arquivo Makefile do documento.</para>

	<para>O <makevar>PREFIX</makevar> define o caminho no
	  qual os <link linkend="tools">aplicativos de 
	  construção da documentação</link> 
	  estão instalados.  Para uma instalação 
	  normal através de pacotes e/ou ports, este caminho 
	  será sempre <filename>/usr/local</filename>.</para>

	<para>A variável <makevar>PRI_LANG</makevar> deve ser 
	  configurada para refletir o idioma e a 
	  codificação nativa dos usuários aos 
	  quais os documentos se destinam.  O Inglês Americano 
	  (US English) é o padrão.</para>

	<note>
	  <para>A variável <makevar>PRI_LANG</makevar> de 
	    maneira alguma afeta quais documentos serão, 
	    ou que poderão, ser compilados.  Sua 
	    função principal é criar links para 
	    os documentos referenciados com maior frequência no 
	    diretório raiz de instalação da 
	    documentação do FreeBSD.</para>
	</note>
      </sect3>

      <sect3>
	<title>Condicionais</title>

	<para>A linha <literal>.if defined(DOC)</literal> é 
	  um exemplo da condicional do <application>make</application>
	  , como em outros programas, define o comportamento se 
	  alguma condição é verdadeira ou se 
	  é falsa.  <literal>defined</literal> é uma 
	  função que retorna se uma dada 
	  variável está definida ou não.</para>

	<para>A seguir, <literal>.if ${DOCFORMAT} == "docbook"
	  </literal>, testa se a variável <makevar>DOCFORMAT
	  </makevar> é <literal>"docbook"</literal>, e neste 
	  caso, inclue o <filename>doc.docbook.mk</filename>.</para>

	<para>Os dois <literal>.endif</literal>s fecham as duas 
	  condicionais anteriores, marcando o fim da sua 
	  aplicação.</para>
      </sect3>
    </sect2>

    <sect2>
      <title>doc.subdir.mk</title>

      <para>Este arquivo é muito longo para ser explicado por 
	inspeção, você deve ser capaz de 
	interpretá-lo com o conhecimento adquirido nos 
	capítulos anteriores, e com a pequena ajuda dada 
	aqui.</para>

      <sect3>
	<title>Variáveis</title>

	<itemizedlist>
	  <listitem>
	    <para><makevar>SUBDIR</makevar> é a lista de 
	      subdiretórios nos quais o processo de 
	      construção deve ser executado.</para>
	  </listitem>

	  <listitem>
	    <para><makevar>ROOT_SYMLINKS</makevar> são os nomes
	      dos diretórios que devem ser linkados para a 
	      raíz de instalação do documento 
	      a partir da sua localização atual, se o 
	      idioma atual for o idioma primário (especificado
	      por <makevar>PRI_LANG</makevar>).</para>
	  </listitem>

	  <listitem>
	    <para>O <makevar>COMPAT_SYMLINK</makevar> já foi 
	      descrito na seção <link 
	      linkend="sub-make">Makefiles de subdiretório
	      </link>.</para>
	  </listitem>
	</itemizedlist>
      </sect3>

      <sect3>
	<title>Targets e Macros</title>

	<para>As dependências são descritas por
	  <literal><replaceable>target</replaceable>:
	  <replaceable>dependência1 dependência2 ...
	  </replaceable></literal>, nas quais, para construir o 
	  <literal>target</literal>, você necessita 
	  primeiramente construir as dependências 
	  informadas.</para>

	<para>Depois desta descrição, 
	  instruções de como construir o target podem 
	  ser passadas, no caso do processo de conversão 
	  entre o target e estas dependências não 
	  tiver sido previamente definido, ou se esta 
	  conversão em particular não for a mesma 
	  que a definida pelo método padrão de 
	  conversão.</para>

	<para>A dependência especial <literal>.USE</literal> 
	  define o equivalente a uma macro.</para>

<programlisting>_SUBDIRUSE: .USE
.for entry in ${SUBDIR}
	@${ECHO} "===&gt; ${DIRPRFX}${entry}"
	@(cd ${.CURDIR}/${entry} &amp;&amp; \
	${MAKE} ${.TARGET:S/realpackage/package/:S/realinstall/install/} DIRPRFX=${DIRPRFX}${entry}/ )
.endfor</programlisting>

	<para>No código acima, <maketarget>_SUBDIRUSE
	  </maketarget> é agora uma macro, a qual irá 
	  executar determinados comandos quando for listada como 
	  dependência.</para>

	<para>O que define esta macro a parte de outros targets? 
	  Basicamente, ela é executada <emphasis>após
	  </emphasis> as instruções passadas no 
	  processo de construção por ser uma 
	  dependência para o mesmo, e ela não 
	  configura o <makevar>.TARGET</makevar>, que é a
	  variável que contém o nome do target atual 
	  que está sendo construído.</para>

<programlisting>clean: _SUBDIRUSE
	rm -f ${CLEANFILES}</programlisting>

	<para>No código acima, o <maketarget>clean</maketarget>
	  irá usar a macro <maketarget>_SUBDIRUSE</maketarget>
	  depois de ter executado a instrução
	  <command>rm -f ${CLEANFILES}</command>.  De fato, isto causa
	  uma limpeza (<maketarget>clean</maketarget>) na 
	  árvore de diretórios, deletando os arquivos 
	  construídos enquanto vai 
	  <emphasis>descendo</emphasis> pelos subdiretórios, 
	  e não quando vai na direção 
	  oposta.</para>

	<sect4>
	  <title>Targets fornecidos</title>

	  <itemizedlist>
	    <listitem>
	      <para><maketarget>install</maketarget> e
		<maketarget>package</maketarget>, ambos descem pela
		árvore de diretórios executando a sua
		versão real dentro dos subdiretórios.  
		(<maketarget>realinstall</maketarget> e 
		<maketarget>realpackage</maketarget> 
		respectivamente).</para>
	    </listitem>

	    <listitem>
	      <para>O <maketarget>clean</maketarget> remove os 
		arquivos criados pelo processo de 
		compilação (e também desce na 
		árvore de diretórios).  
		O <maketarget>cleandir</maketarget> faz a mesma 
		coisa, e também remove o diretório 
		de objetos se este existir.</para>
	    </listitem>
	  </itemizedlist>
	</sect4>
      </sect3>

      <sect3>
	<title>Mais Condicionais</title>

	<itemizedlist>
	  <listitem>
	    <para><literal>exists</literal> é outra 
	      função condicional que retorna verdadeiro
	      se o arquivo informado existir.</para>
	  </listitem>

	  <listitem>
	    <para><literal>empty</literal> retorna verdadeiro se a 
	      variável informada estiver vazia.</para>
	  </listitem>

	  <listitem>
	    <para><literal>target</literal> retorna verdadeiro se o 
	      target informado ainda não existir.</para>
	  </listitem>
	</itemizedlist>
      </sect3>

      <sect3>
	<title>Construção de Looping no 
	  <command>make (.for)</command></title>

	<para>O <literal>.for</literal> fornece uma maneira de 
	  repetir instruções definidas para cada 
	  elemento separado por espaço em uma variável.
	  Ele faz isso atribuíndo uma variável para 
	  conter o elemento atual da lista que está sendo 
	  examinada.</para>

<programlisting>_SUBDIRUSE: .USE
.for entry in ${SUBDIR}
	@${ECHO} "===&gt; ${DIRPRFX}${entry}"
	@(cd ${.CURDIR}/${entry} &amp;&amp; \
	${MAKE} ${.TARGET:S/realpackage/package/:S/realinstall/install/} DIRPRFX=${DIRPRFX}${entry}/ )
.endfor</programlisting>

	<para>No código acima, se <makevar>SUBDIR</makevar> 
	  estiver vazia, nenhuma ação será 
	  executada; se ela possuir um ou mais elementos, as 
	  instruções entre o <literal>.for</literal> e 
	  o <literal>.endfor</literal> serão repetidas para 
	  cada elemento, com o <makevar>entry</makevar>
	  sendo substituído com o valor do elemento
	  atual.</para>
      </sect3>
    </sect2>
  </sect1>
</chapter>
